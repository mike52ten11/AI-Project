# -*- coding: utf-8 -*-
"""Course_243.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/ywchiu/largitdata/blob/master/code/Course_243.ipynb

## 錄製聲音
"""

import sounddevice as sd  # 導入 sounddevice 模組，用於聲音錄製
from scipy.io.wavfile import write  # 從 scipy.io 模組中導入 write 函數，用於保存 WAV 文件
import numpy as np  # 導入 numpy 模組，便於處理數據

def record_audio(duration, sample_rate=44100):
    print("正在錄音... 按 Ctrl+C 停止錄音。")
    audio = np.empty((0, 1), dtype=np.int16)  # 初始化一個空的聲音

    try:
        with sd.InputStream(samplerate=sample_rate, channels=1, dtype='int16') as stream:  # 打開輸入聲音
            for _ in range(int(sample_rate * duration / 1024)):  # 將時長分成多個小塊進行錄製
                data, overflowed = stream.read(1024)  # 讀取 1024 個樣本的聲音
                audio = np.append(audio, data, axis=0)  # 將新數據追加到聲音中
    except KeyboardInterrupt:  # 捕捉用戶中斷錄音的操作
        print("\n錄音被用戶中斷。")

    return audio, sample_rate  # 返回錄製的聲音和採樣率

def save_audio(audio, sample_rate, filename="output.wav"):
    write(filename, sample_rate, audio)  # 保存聲音數據到指定的文件中
    print(f"音訊已保存至 {filename}")  # 提示聲音已保存

duration = 3600  # 設定錄音時長為 3600 秒（1 小時）
audio, sample_rate = record_audio(duration)  # 錄製聲音

if audio.size > 0:  # 如果錄製到了聲音
    save_audio(audio, sample_rate)  # 保存聲音
else:
    print("未錄製到聲音。")  # 提示未錄製到聲音

"""## 播放錄音檔案"""

from IPython.display import Audio, display

audio_file_path = "output.wav"

audio = Audio(filename=audio_file_path, autoplay=True)  # 創建 Audio並設定自動播放
display(audio)  # 顯示聲音播放控制項

"""## 利用Gemini Flash 將語音翻譯"""

import google.generativeai as genai  # 導入 google.generativeai 模組，用於使用生成式 AI 功能

key = 'AIzaSyC12cdMg28HCobUSmGbXMKFqtOKmq7s6gQ'
genai.configure(api_key=key)  # 配置 API 金鑰
model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest")  # 創建生成式 AI 模型

def recognize_speech(audio_file_name):  # 定義語音識別函數，接收聲音檔案名作為參數
    audio_file = genai.upload_file(path=audio_file_name)  # 上傳聲音文件
    response = model.generate_content(["please translate given words to english", audio_file])  # 使用模型生成內容
    return response.text  # 返回生成內容

translated_text = recognize_speech('output.wav')
print(translated_text)

"""## 使用Elevenlabs 合成聲音"""

eleven_key = '1a2f40071d855d8ce1fe34f8cfa5ebf4'


import os  # 導入 os 模組，用於操作文件和目錄
import uuid  # 導入 uuid 模組，用於生成唯一的文件名

from elevenlabs import VoiceSettings  # 從 elevenlabs 模組中導入 VoiceSettings 類
from elevenlabs.client import ElevenLabs  # 從 elevenlabs.client 模組中導入 ElevenLabs 類

ELEVENLABS_API_KEY = eleven_key  # 設定 ElevenLabs 的 API 金鑰

client = ElevenLabs(
    api_key=ELEVENLABS_API_KEY,
)  # 創建 ElevenLabs 客戶端對象

def text_to_speech_file(text: str) -> str:
    response = client.text_to_speech.convert(
        voice_id="YJOGcr09yRHKNP9fBqsp",
        optimize_streaming_latency="0",
        output_format="mp3_22050_32",
        text=text,  # 要轉換的文本
        model_id="eleven_turbo_v2",  # 使用 turbo 模型以獲得快速取得轉換結果，對於其他語言使用 `eleven_multilingual_v2`
        voice_settings=VoiceSettings(
            stability=0.0,
            similarity_boost=1.0,
            style=0.0,
            use_speaker_boost=True,
        ),  # 聲音設置
    )

    save_file_path = f"{uuid.uuid4()}.mp3"  # 生成唯一的文件名

    with open(save_file_path, "wb") as f:  # 打開文件以寫入數據
        for chunk in response:
            if chunk:
                f.write(chunk)  # 將每個數據塊寫入文件

    print(f"新音頻文件已成功保存到 {save_file_path}")  # 提示音頻文件保存成功
    return save_file_path  # 返回保存的文件路徑

fpath = text_to_speech_file(translated_text)
print(fpath)

from IPython.display import Audio, display

audio_file_path = "40d8cd10-d095-41d9-9383-af5115553312.mp3"

audio = Audio(filename=audio_file_path, autoplay=True)  # 創建 Audio並設定自動播放
display(audio)  # 顯示聲音播放控制項

"""## 完整程序"""

duration = 3600  # 設定錄音時間為3600秒（1小時）
audio, sample_rate = record_audio(duration)  # 開始錄音，並返回聲音和取樣率

if audio.size > 0:  # 如果錄到聲音
    save_audio(audio, sample_rate)  # 儲存錄製的聲音
    translated_text = recognize_speech("output.wav")  # 語音識別，將聲音轉換為文本
    translated_sound_file = text_to_speech_file(translated_text)  # 將轉換的文本轉為語音
    audio_file_path = translated_sound_file  # 獲取語音文件的路徑

    audio = Audio(filename=audio_file_path, autoplay=True)  # 創建聲音並設置為自動播放
    display(audio)  # 顯示聲音播放控件
else:
    print("未錄製到聲音")  # 如果未錄製到聲音，輸出提示信息

